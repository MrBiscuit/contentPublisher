// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x53YSqYu9UQKZv7sZYfY6w
// Component: fqf1kH04rK

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BodyContent from "../../BodyContent"; // plasmic-import: VAwcC_YmCU/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: x53YSqYu9UQKZv7sZYfY6w/projectcss
import sty from "./PlasmicDetailPage.module.css"; // plasmic-import: fqf1kH04rK/css

export type PlasmicDetailPage__VariantMembers = {};
export type PlasmicDetailPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicDetailPage__VariantsArgs;
export const PlasmicDetailPage__VariantProps = new Array<VariantPropType>();

export type PlasmicDetailPage__ArgsType = {
  title?: string;
  onTitleChange?: (val: string) => void;
  subtitle?: string;
  onSubtitleChange?: (val: string) => void;
  img?: string;
  onImgChange?: (val: string) => void;
  bodyText?: string;
  onBodyTextChange?: (val: string) => void;
  backClicked?: (event: any) => void;
  contents?: any;
  onContentsChange?: (val: any) => void;
};
type ArgPropType = keyof PlasmicDetailPage__ArgsType;
export const PlasmicDetailPage__ArgProps = new Array<ArgPropType>(
  "title",
  "onTitleChange",
  "subtitle",
  "onSubtitleChange",
  "img",
  "onImgChange",
  "bodyText",
  "onBodyTextChange",
  "backClicked",
  "contents",
  "onContentsChange"
);

export type PlasmicDetailPage__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  freeBox?: p.Flex<"div">;
  bodyContent?: p.Flex<typeof BodyContent>;
};

export interface DefaultDetailPageProps {
  title?: string;
  onTitleChange?: (val: string) => void;
  subtitle?: string;
  onSubtitleChange?: (val: string) => void;
  img?: string;
  onImgChange?: (val: string) => void;
  bodyText?: string;
  onBodyTextChange?: (val: string) => void;
  backClicked?: (event: any) => void;
  contents?: any;
  onContentsChange?: (val: any) => void;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDetailPage__RenderFunc(props: {
  variants: PlasmicDetailPage__VariantsArgs;
  args: PlasmicDetailPage__ArgsType;
  overrides: PlasmicDetailPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "title",
        type: "writable",
        variableType: "text",

        valueProp: "title",
        onChangeProp: "onTitleChange"
      },
      {
        path: "subtitle",
        type: "writable",
        variableType: "text",

        valueProp: "subtitle",
        onChangeProp: "onSubtitleChange"
      },
      {
        path: "img",
        type: "writable",
        variableType: "text",

        valueProp: "img",
        onChangeProp: "onImgChange"
      },
      {
        path: "bodyText",
        type: "writable",
        variableType: "text",

        valueProp: "bodyText",
        onChangeProp: "onBodyTextChange"
      },
      {
        path: "contents",
        type: "writable",
        variableType: "array",

        valueProp: "contents",
        onChangeProp: "onContentsChange"
      },
      {
        path: "bodyContent[].content",
        type: "private",
        variableType: "object"
      },
      {
        path: "bodyContent[].type",
        type: "private",
        variableType: "text"
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__hq9Xm
          )}
          onClick={args.backClicked}
        >
          {"<- back"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__oDjm1
          )}
        >
          {(() => {
            try {
              return $state.title;
            } catch (e) {
              if (e instanceof TypeError) {
                return "Title";
              }
              throw e;
            }
          })()}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vJWdd
          )}
        >
          {(() => {
            try {
              return $state.subtitle;
            } catch (e) {
              if (e instanceof TypeError) {
                return "Title";
              }
              throw e;
            }
          })()}
        </div>
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"100%" as const}
          loading={"lazy" as const}
          src={(() => {
            try {
              return $state.img;
            } catch (e) {
              if (e instanceof TypeError) {
                return undefined;
              }
              throw e;
            }
          })()}
        />

        {true
          ? (
              (() => {
                try {
                  return $state.contents;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return [];
                  }
                  throw e;
                }
              })() ?? []
            ).map((currentItem, currentIndex) => (
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
                key={currentIndex}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.bodyContent),
                    content: p.generateStateValueProp($state, [
                      "bodyContent",
                      currentIndex,
                      "content"
                    ]),
                    onContentChange: p.generateStateOnChangeProp($state, [
                      "bodyContent",
                      currentIndex,
                      "content"
                    ]),
                    onTypeChange: p.generateStateOnChangeProp($state, [
                      "bodyContent",
                      currentIndex,
                      "type"
                    ])
                  };

                  p.initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "bodyContent[].content",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      }
                    ],
                    [currentIndex]
                  );
                  return (
                    <BodyContent
                      data-plasmic-name={"bodyContent"}
                      data-plasmic-override={overrides.bodyContent}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
            ))
          : null}
        {(
          (() => {
            try {
              return $state.contents;
            } catch (e) {
              if (e instanceof TypeError) {
                return [];
              }
              throw e;
            }
          })() ?? []
        ).map((currentItem, currentIndex) => (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gJbGl
            )}
            key={currentIndex}
          >
            {(() => {
              try {
                return currentItem.type;
              } catch (e) {
                if (e instanceof TypeError) {
                  return "contents = ";
                }
                throw e;
              }
            })()}
          </div>
        ))}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "freeBox", "bodyContent"],
  img: ["img"],
  freeBox: ["freeBox", "bodyContent"],
  bodyContent: ["bodyContent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  freeBox: "div";
  bodyContent: typeof BodyContent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDetailPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDetailPage__VariantsArgs;
    args?: PlasmicDetailPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDetailPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDetailPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDetailPage__ArgProps,
          internalVariantPropNames: PlasmicDetailPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDetailPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDetailPage";
  } else {
    func.displayName = `PlasmicDetailPage.${nodeName}`;
  }
  return func;
}

export const PlasmicDetailPage = Object.assign(
  // Top-level PlasmicDetailPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    bodyContent: makeNodeComponent("bodyContent"),

    // Metadata about props expected for PlasmicDetailPage
    internalVariantProps: PlasmicDetailPage__VariantProps,
    internalArgProps: PlasmicDetailPage__ArgProps
  }
);

export default PlasmicDetailPage;
/* prettier-ignore-end */
